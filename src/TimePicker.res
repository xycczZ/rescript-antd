@react.component @module("antd")
external make: (
  ~allowClear: bool=?,
  ~autoFocus: bool=?,
  ~bordered: bool=?,
  ~className: string=?,
  ~clearIcon: React.element=?,
  ~clearText: string=?,
  ~defaultValue: 'a=?,
  ~disabled: bool=?,
  ~disabledTime: 'a => DatePicker.disabledTimes=?,
  ~format: string=?,
  ~getPopupContainer: unit => Webapi.Dom.HtmlElement.t=?,
  ~hideDisabledOptions: bool=?,
  ~hourStep: int=?,
  ~inputReadOnly: bool=?,
  ~minuteStep: int=?,
  ~\"open": bool=?,
  ~placeholder: (string, string)=?,
  ~placement: [#bottomLeft | #bottomRight | #topLeft | #topRight]=?,
  ~popupClassName: string=?,
  ~popupStyle: ReactDOM.style=?,
  ~renderExtraFooter: unit => React.element=?,
  ~secondStep: int=?,
  ~showNow: bool=?,
  ~status: [#error | #warning]=?,
  ~suffixIcon: React.element=?,
  ~use12Hours: bool=?,
  ~value: 'a=?,
  ~onChange: ('a, string) => unit=?,
  ~onOpenChange: bool => unit=?,
) => React.element = "TimePicker"

module RangePicker = {
  @react.component @module("antd") @scope("TimePicker")
  external make: (
    ~dropdownClassName: string=?,
    ~allowClear: bool=?,
    ~inputReadOnly: bool=?,
    ~id: string=?,
    ~dropdownAlign: DatePicker.alignType=?,
    ~popupStyle: ReactDOM.style=?,
    ~transitionName: string=?,
    ~tabIndex: int=?,
    ~autoFocus: bool=?,
    ~bordered: bool=?,
    ~className: string=?,
    ~disabledDate: 'a => bool,
    ~popupClassName: string=?,
    ~getPopupContainer: unit => Webapi.Dom.HtmlElement.t=?,
    ~inputReadOnly: bool=?,
    ~locale: DatePicker.locale=?,
    ~mode: DatePicker.panelMode=?,
    ~nextIcon: React.element=?,
    ~\"open": bool=?,
    ~defaultOpen: bool=?,
    ~panelRender: React.element => React.element=?,
    ~picker: [#date | #week | #month | #quarter | #year]=?,
    ~placeholder: (string, string)=?,
    ~placement: [#bottomLeft | #bottomRight | #topLeft | #topRight]=?,
    ~popupStyle: ReactDOM.style=?,
    ~prevIcon: React.element=?,
    ~presets: array<DatePicker.presets<'a>>=?,
    ~size: [#large | #small | #middle]=?,
    ~status: [#error | #warning]=?,
    ~style: ReactDOM.style=?,
    ~suffixIcon: React.element=?,
    ~superNextIcon: React.element=?,
    ~superPrevIcon: React.element=?,
    ~onOpenChange: bool => unit=?,
    ~onPanelChange: ('a, DatePicker.panelMode) => unit=?,
    ~onFocus: ReactEvent.Synthetic.t => unit=?,
    ~onBlur: ReactEvent.Synthetic.t => unit=?,
    ~onMouseDown: ReactEvent.Mouse.t => unit=?,
    ~onMouseUp: ReactEvent.Mouse.t => unit=?,
    ~onMouseEnter: ReactEvent.Mouse.t => unit=?,
    ~onMouseLeave: ReactEvent.Mouse.t => unit=?,
    ~onClick: ReactEvent.Mouse.t => unit=?,
    ~onContextMenu: ReactEvent.Mouse.t => unit=?,
    ~onKeyDown: (ReactEvent.Keyboard.t, unit => unit) => unit=?,
    ~role: string=?,
    ~name: string=?,
    ~autoComplete: string=?,
    ~direction: [#ltr | #rtl],
    ~allowEmpty: (bool, bool)=?,
    ~dateRender: ('a, 'a, DatePicker.RangePicker.rangeInfo) => React.element=?,
    ~defaultPickerValue: array<'a>=?,
    ~defaultValue: array<'a>=?,
    ~disabled: (bool, bool)=?,
    ~disabledTime: ('a, [#start | #end]) => DatePicker.disabledTimes=?,
    ~format: string=?,
    ~presets: array<DatePicker.presets<'a>>=?,
    ~renderExtraFooter: unit => React.element=?,
    ~separator: React.element=?,
    ~showTime: DatePicker.showTime=?,
    ~onCalendarChange: (DatePicker.RangePicker.rangeValue<'a>, (string, string), DatePicker.RangePicker.rangeInfo) => unit=?,
    ~onChange: (DatePicker.RangePicker.rangeValue<'a>, (string, string)) => unit=?,
    ~order: bool=?,
  ) => React.element = "RangePicker"
}
